// Constants: these won't change
const int ledPin = 13;
const uint16_t TICK_CNT = 3; // 255-(16MHz/1024/62Hz)  
const unsigned long T_MIN   =  500;
const unsigned long T_MAX   = 4000;
const unsigned long T_VALID =  100;

// These will change
double sped = 0; //"speed" seems to be a reserved term
unsigned long Timer;
unsigned long time_stored = 0;
static uint16_t freq = 0;
float freq_stored = 0;
static float freq_last = 0;


void setup() {
  
  pinMode(ledPin, OUTPUT);
  Serial.begin(115200);

  noInterrupts();                     // disable all interrupts while we configure  
  // init Timer1 - 16-bit timer/counter
  TCNT1   = 0;                                  // start count at zero.        
  TCCR1B  |= _BV(CS12) | _BV(CS11) | _BV(CS10); // Increment T1 input on each positive edge 
                                                // using an external source. Table 16-5, pg 139.
  
  // init Timer2 - 8-bit timer/counter
  TCNT2   = TICK_CNT;                 // preload Timer2 to interrupt every 250 msec
  TIMSK2  = _BV(TOIE2);               // enable the Timer2 overflow interrupt 
  TCCR2B  |= _BV(CS22) |_BV(CS21) | _BV(CS20);   // init clock prescaler to 1024. Table 18-9, page 164.
  interrupts();                       // enable all interrupts
  Serial.println("Ready");
}

ISR(TIMER2_OVF_vect) {
  freq = TCNT1;     // save the count
  TCNT1 = 0;        // reset the count
  TCNT2 = TICK_CNT; // preload Timer2
}

void loop() {

  digitalWrite(ledPin, HIGH);
  
  Timer = millis(); //reset Timer.

  while(currentTime() < T_MIN) {
    while(currentTime() < T_VALID) {
      if(freq != 0 && digitalRead(ledPin)==HIGH) {
          Serial.println("Inside if.");
          digitalWrite(ledPin, LOW);
          Timer = millis();
      }
      else {
        break;
      }
    Serial.println("2nd break.");
    break;
    }
  }
  
  freq_stored = 0;
  
  while(currentTime() < T_MAX) {
    if(freq > freq_stored) {
      freq_stored = freq;
      time_stored = currentTime();
    }
  }
  
  Serial.print("Freq:\t");
  Serial.print(freq_stored);
  Serial.print(" Time:\t");
  Serial.println(time_stored);
  if(freq_stored == freq_last) {
      Serial.println("Same speed as last time.");
  }
  freq_last = freq_stored;
  freq = 0;
}    

unsigned long currentTime () {
  millis() - Timer;
}

void display() {
}

ISR(TIMER1_OVF_vect) {
  // do nothing. this is just a dummy ISR in case it actually overflows.
  Serial.println("Inside Timer1 Overflow Interrupt.");
}